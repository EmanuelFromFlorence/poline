{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["export type FuncNumberReturn = (arg0: number) => Vector2;\nexport type Vector2 = [number, number];\nexport type Vector3 = [number, number, number];\n\nexport const pointToHSL = (\n  x: number,\n  y: number,\n  z: number\n): Vector3 => {\n  const cy = 0.5;\n  const cx = 0.5;\n  const radians = Math.atan2(y - cy, x - cx);\n  let deg = radians * (180 / Math.PI);\n  deg = (deg + 90) % 360;\n  const s = z;\n\n  const dist = Math.sqrt(Math.pow(y - cy, 2) + Math.pow(x - cx, 2));\n\n  const l = dist / cx;\n\n  return [deg, s, l];\n};\n\nexport const hslToPoint = (hsl: Vector3): Vector3 => {\n  const [h, s, l] = hsl;\n  const cx = 0.5;\n  const cy = 0.5;\n\n  const radians = h / (180 / Math.PI) - 90;\n  const dist = l * cx;\n  const x = cx + dist * Math.cos(radians);\n  const y = cy + dist * Math.sin(radians);\n  const z = s;\n\n  return [x, y, z];\n};\n\nexport const randomHSLPair = (\n  minHDiff = 90,\n  minSDiff = 0,\n  minLDiff = 0.2,\n  previousColor: Vector3 | null = null\n): [Vector3, Vector3] => {\n  let h1, s1, l1;\n\n  if (previousColor) {\n    [h1, s1, l1] = previousColor;\n  } else {\n    h1 = Math.random() * 360;\n    s1 = Math.random();\n    l1 = Math.random();\n  }\n\n  const h2 =\n    (360 + (h1 + minHDiff + Math.random() * (360 - minHDiff * 2))) % 360;\n  const s2 = minSDiff + Math.random() * (1 - minSDiff);\n  const l2 = minSDiff + Math.random() * (1 - minLDiff);\n\n  return [\n    [h1, s1, l1],\n    [h2, s2, l2],\n  ];\n};\n\nexport const vectorsOnLine = (\n  p1: Vector3,\n  p2: Vector3,\n  numPoints = 4,\n  f = (t, p) => t\n):Vector3[] => {\n  const points:Vector3[] = [];\n\n  for (let i = 0; i < numPoints; i++) {\n    const t = i / (numPoints - 1);\n    const tModified = f(t, numPoints);\n    const x = (1 - tModified) * p1[0] + tModified * p2[0];\n    const y = (1 - tModified) * p1[1] + tModified * p2[1];\n    const z = (1 - tModified) * p1[2] + tModified * p2[2];\n\n    points.push([x, y, z]);\n  }\n\n  return points;\n};\n\nconst linearPosition = (t: number) => {\n  return t;\n};\n\nconst exponentialPosition = (t: number) => {\n  return t ** 2;\n};\n\nconst quadraticPosition = (t: number) => {\n  return t ** 3;\n};\n\nconst cubicPosition = (t: number) => {\n  return t ** 4;\n};\n\nconst quarticPosition = (t: number) => {\n  return t ** 5;\n};\n\nconst quinticPosition = (t: number) => {\n  return t ** 6;\n};\n\nconst sinusoidalPosition = (t: number) => {\n  return Math.sin(t * Math.PI / 2);\n};\n\nconst reverseSinusoidalPosition = (t: number) => {\n  return 1 - Math.sin((1 - t) * Math.PI / 2);\n};\n\nconst circularPosition = (t: number) => {\n  return 1 - Math.sqrt(1 - t ** 2);\n};\n\nconst reverseCircularPosition = (t: number) => {\n  return Math.sqrt(1 - (1 - t) ** 2);\n};\n\nconst arcPosition = (t: number) => {\n  return 1 - Math.sqrt(1 - t);\n};\n\nconst reverseArcPosition = (t: number) => {\n  return Math.sqrt(1 - (1 - t) ** 2);\n};\n\nexport const positionFunctions = {\n  linearPosition,\n  exponentialPosition,\n  quadraticPosition,\n  cubicPosition,\n  quarticPosition,\n  quinticPosition,\n  sinusoidalPosition,\n  reverseSinusoidalPosition,\n  circularPosition,\n  reverseCircularPosition,\n  arcPosition,\n  reverseArcPosition,\n};\n\nconst distance = (p1, p2) => {\n  const a = p2[0] - p1[0];\n  const b = p2[1] - p1[1];\n  const c = p2[2] - p1[2];\n\n  return Math.sqrt(a * a + b * b + c * c);\n}\nclass ColorPoint {\n  constructor({ \n    x = null, \n    y = null, \n    z = null, \n    color = null, \n  } = {}) {\n    this.position = { x, y, z, color };\n  }\n\n  x: number | null;\n  y: number | null;\n  z: number | null;\n  color: Vector3 | null;\n\n  public set position({ \n    x = null, \n    y = null, \n    z = null, \n    color = null, \n  }) {\n    if (x && y && y && color) {\n      throw new Error(\"Point must be initialized with either x,y,z or hsl\");\n    } else if (x && y && z) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.color = pointToHSL(this.x, this.y, this.z);\n    } else if (color) {\n      this.color = color;\n      [this.x, this.y, this.z]  = hslToPoint(this.color);\n    }\n  }\n\n  get position (): Vector3 {\n    return [this.x, this.y, this.z];\n  }\n\n  get hslCSS (): string {\n    return `hsl(${this.color[0]}, ${this.color[1] * 100}%, ${this.color[2] * 100}%)`;\n  }\n}\n\n\nexport class Poline {\n  constructor(\n    anchorColors = randomHSLPair(), \n    numPoints = 6,\n  ) {\n    this.anchorPoints = anchorColors.map(\n      point => new ColorPoint({x: null, y: null, z: null, color: point})\n    );\n\n    this.numPoints = numPoints;\n\n    this.points = vectorsOnLine(\n      this.anchorPoints[0].position,\n      this.anchorPoints[1].position,\n      numPoints,\n      exponentialPosition,\n    ).map((p) => new ColorPoint(\n      {x: p[0], y: p[1], z: p[2], color: null}\n    ));\n  }\n\n  anchorPoints: ColorPoint[];\n  numPoints: number;\n  points: ColorPoint[];\n\n  createPointPairs() {\n    const pairs = [];\n    for (let i = 0; i < this.points.length - 1; i++) {\n      pairs.push(\n        [this.points[i], this.points[i + 1]]\n      );\n    }\n    return pairs;\n  }\n\n  getClosestAnchorPoint(point: Vector3, maxDistance: 1) {\n    const distances = this.anchorPoints.map((anchor) => {\n      return distance(anchor.position, point);\n    });\n\n    const minDistance = Math.min(...distances);\n    if (minDistance > maxDistance) {\n      return null;\n    }\n\n    const closestAnchorIndex = distances.indexOf(minDistance);\n    \n    return this.anchorPoints[closestAnchorIndex];\n  }\n\n  public set anchorPoint({pointReference, pointIndex, x,y,z, color}) {\n    let index = pointIndex;\n\n    if (pointReference) {\n      index = this.anchorPoints.indexOf(pointReference);\n    }\n      \n    this.anchorPoints[index] = new ColorPoint({x, y, z, color});\n  }\n\n  get colors() {\n    return this.points.map((p) => p.color);\n  }\n\n  get colorsCSS() {\n    return this.points.map((c) => c.hslCSS);\n  }\n}"],
  "mappings": "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",
  "names": []
}
