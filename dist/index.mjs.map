{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["export type FuncNumberReturn = (arg0: number) => Vector2;\nexport type Vector2 = [number, number];\nexport type Vector3 = [number, number, number];\n\nexport const pointToHSL = (x: number, y: number, z: number): Vector3 => {\n  // Converts the given (x, y, z) coordinate to an HSL color\n  // The (x, y) values are used to calculate the hue, while the z value is used as the saturation\n  // The lightness value is calculated based on the distance of (x, y) from the center (0.5, 0.5)\n  // Returns an array [hue, saturation, lightness]\n\n  // cy and cx are the center (y and x) values\n  const cx = 0.5;\n  const cy = 0.5;\n\n  // Calculate the angle between the point (x, y) and the center (cx, cy)\n  const radians = Math.atan2(y - cy, x - cx);\n\n  // Convert the angle to degrees and shift it so that it goes from 0 to 360\n  let deg = radians * (180 / Math.PI);\n  deg = (deg + 90) % 360;\n\n  // The saturation value is taken from the z coordinate\n  const s = z;\n\n  // Calculate the lightness value based on the distance from the center\n  const dist = Math.sqrt(Math.pow(y - cy, 2) + Math.pow(x - cx, 2));\n  const l = dist / cx;\n\n  // Return the HSL color as an array [hue, saturation, lightness]\n  return [deg, s, l];\n};\n\nexport const hslToPoint = (hsl: Vector3): Vector3 => {\n  // Converts the given HSL color to an (x, y, z) coordinate\n  // The hue value is used to calculate the (x, y) position, while the saturation value is used as the z coordinate\n  // The lightness value is used to calculate the distance from the center (0.5, 0.5)\n  // Returns an array [x, y, z]\n\n  // Destructure the input array into separate hue, saturation, and lightness values\n  const [h, s, l] = hsl;\n  // cx and cy are the center (x and y) values\n  const cx = 0.5;\n  const cy = 0.5;\n  // Calculate the angle in radians based on the hue value\n  const radians = h / (180 / Math.PI) - 90;\n  // Calculate the distance from the center based on the lightness value\n  const dist = l * cx;\n  // Calculate the x and y coordinates based on the distance and angle\n  const x = cx + dist * Math.cos(radians);\n  const y = cy + dist * Math.sin(radians);\n  // The z coordinate is equal to the saturation value\n  const z = s;\n  // Return the (x, y, z) coordinate as an array [x, y, z]\n  return [x, y, z];\n};\n\nexport const randomHSLPair = (\n  minHDiff = 90,\n  minSDiff = 0,\n  minLDiff = 0.25,\n  previousColor: Vector3 | null = null\n): [Vector3, Vector3] => {\n  let h1, s1, l1;\n\n  if (previousColor) {\n    [h1, s1, l1] = previousColor;\n  } else {\n    h1 = Math.random() * 360;\n    s1 = Math.random();\n    l1 = Math.random();\n  }\n\n  const h2 =\n    (360 + (h1 + minHDiff + Math.random() * (360 - minHDiff * 2))) % 360;\n  const s2 = minSDiff + Math.random() * (1 - minSDiff);\n  const l2 = minSDiff + Math.random() * (1 - minLDiff);\n\n  return [\n    [h1, s1, l1],\n    [h2, s2, l2],\n  ];\n};\n\nexport const vectorsOnLine = (\n  p1: Vector3,\n  p2: Vector3,\n  numPoints = 4,\n  f = (t, invert: boolean) => t,\n  invert = false\n): Vector3[] => {\n  const points: Vector3[] = [];\n\n  for (let i = 0; i < numPoints; i++) {\n    const t = i / (numPoints - 1);\n    const tModified = f(t, invert);\n    const x = (1 - tModified) * p1[0] + tModified * p2[0];\n    const y = (1 - tModified) * p1[1] + tModified * p2[1];\n    const z = (1 - tModified) * p1[2] + tModified * p2[2];\n\n    points.push([x, y, z]);\n  }\n\n  return points;\n};\n\nconst linearPosition = (t: number) => {\n  return t;\n};\n\nconst exponentialPosition = (t: number, reverse = false) => {\n  if (reverse) {\n    return 1 - (1 - t) ** 2;\n  }\n  return t ** 2;\n};\n\nconst quadraticPosition = (t: number, reverse = false) => {\n  if (reverse) {\n    return 1 - (1 - t) ** 3;\n  }\n  return t ** 3;\n};\n\nconst sinusoidalPosition = (t: number, reverse = false) => {\n  if (reverse) {\n    return 1 - Math.sin(((1 - t) * Math.PI) / 2);\n  }\n  return Math.sin((t * Math.PI) / 2);\n};\n\nconst circularPosition = (t: number, reverse = false) => {\n  if (reverse) {\n    return 1 - Math.sqrt(1 - (1 - t) ** 2);\n  }\n  return 1 - Math.sqrt(1 - t ** 2);\n};\n\nconst arcPosition = (t: number, reverse = false) => {\n  if (reverse) {\n    return Math.sqrt(1 - (1 - t) ** 2);\n  }\n  return 1 - Math.sqrt(1 - t);\n};\n\nexport const positionFunctions = {\n  linearPosition,\n  exponentialPosition,\n  quadraticPosition,\n  sinusoidalPosition,\n  circularPosition,\n  arcPosition,\n};\n\nconst distance = (p1, p2) => {\n  const a = p2[0] - p1[0];\n  const b = p2[1] - p1[1];\n  const c = p2[2] - p1[2];\n\n  return Math.sqrt(a * a + b * b + c * c);\n};\nclass ColorPoint {\n  public x = 0;\n  public y = 0;\n  public z = 0;\n  public color: Vector3 = [0, 0, 0];\n\n  constructor({ x = null, y = null, z = null, color = null } = {}) {\n    this.positionAndColor = { x, y, z, color };\n  }\n\n  public set positionAndColor({ x = null, y = null, z = null, color = null }) {\n    if (x && y && y && color) {\n      throw new Error(\"Point must be initialized with either x,y,z or hsl\");\n    } else if (x && y && z) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.color = pointToHSL(this.x, this.y, this.z);\n    } else if (color) {\n      this.color = color;\n      [this.x, this.y, this.z] = hslToPoint(color);\n    }\n  }\n\n  get position(): Vector3 {\n    return [this.x, this.y, this.z];\n  }\n\n  get hslCSS(): string {\n    return `hsl(${this.color[0]}, ${this.color[1] * 100}%, ${\n      this.color[2] * 100\n    }%)`;\n  }\n}\n\nexport class Poline {\n  public anchorPoints: ColorPoint[];\n\n  private numPoints: number;\n  private points: ColorPoint[][];\n  private positionFunction = sinusoidalPosition;\n\n  constructor(\n    anchorColors = randomHSLPair(),\n    numPoints = 4,\n    positionFunction = sinusoidalPosition\n  ) {\n    if (!anchorColors || anchorColors.length < 2) {\n      throw new Error(\"Must have at least two anchor colors\");\n    }\n\n    if (numPoints < 1) {\n      throw new Error(\"Must have at least one point\");\n    }\n\n    this.anchorPoints = anchorColors.map(\n      (point) => new ColorPoint({ x: null, y: null, z: null, color: point })\n    );\n\n    this.numPoints = numPoints + 2; // add two for the anchor points\n    this.positionFunction = positionFunction;\n\n    this.updatePointPairs();\n  }\n\n  updatePointPairs() {\n    const pairs = [];\n    for (let i = 0; i < this.anchorPoints.length - 1; i++) {\n      pairs.push([this.anchorPoints[i], this.anchorPoints[i + 1]]);\n    }\n    this.points = pairs.map((pair, i) => {\n      return vectorsOnLine(\n        pair[0].position,\n        pair[1].position,\n        this.numPoints,\n        this.positionFunction,\n        i % 2 ? true : false\n      ).map((p) => new ColorPoint({ x: p[0], y: p[1], z: p[2], color: null }));\n    });\n  }\n\n  addAnchorPoint({ x, y, z, color }) {\n    const newAnchor = new ColorPoint({ x, y, z, color });\n    this.anchorPoints.push(newAnchor);\n    this.updatePointPairs();\n  }\n\n  getClosestAnchorPoint(point: Vector3, maxDistance: 1) {\n    const distances = this.anchorPoints.map((anchor) => {\n      return distance(anchor.position, point);\n    });\n\n    const minDistance = Math.min(...distances);\n    if (minDistance > maxDistance) {\n      return null;\n    }\n\n    const closestAnchorIndex = distances.indexOf(minDistance);\n\n    return this.anchorPoints[closestAnchorIndex];\n  }\n\n  public set anchorPoint({ pointReference, pointIndex, x, y, z, color }) {\n    let index = pointIndex;\n\n    if (pointReference) {\n      index = this.anchorPoints.indexOf(pointReference);\n    }\n\n    this.anchorPoints[index] = new ColorPoint({ x, y, z, color });\n\n    this.updatePointPairs();\n  }\n\n  get flattenedPoints() {\n    return this.points\n      .flat()\n      .filter((p, i) => (i != 0 ? i % this.numPoints : true));\n  }\n\n  get colors() {\n    return this.flattenedPoints.map((p) => p.color);\n  }\n\n  get colorsCSS() {\n    return this.flattenedPoints.map((c) => c.hslCSS);\n  }\n}\n"],
  "mappings": "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",
  "names": ["invert"]
}
