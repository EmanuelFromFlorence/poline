var m=s=>{let[t,o,r]=s,n=.5,i=.5,c=Math.atan2(o-i,t-n)*(180/Math.PI);c=(c+90)%360;let a=r,u=Math.sqrt(Math.pow(o-i,2)+Math.pow(t-n,2))/n;return[c,a,u]},b=s=>{let[t,o,r]=s,n=.5,i=.5,e=t/(180/Math.PI)-90,c=r*n,a=n+c*Math.cos(e),h=i+c*Math.sin(e);return[a,h,o]},f=(s=90,t=0,o=.25,r=null)=>{let n,i,e;r?[n,i,e]=r:(n=Math.random()*360,i=Math.random(),e=Math.random());let c=(360+(n+s+Math.random()*(360-s*2)))%360,a=t+Math.random()*(1-t),h=t+Math.random()*(1-o);return[[n,i,e],[c,a,h]]},x=(s,t,o=4,r=(i,e)=>e?1-i:i,n=!1)=>{let i=[];for(let e=0;e<o;e++){let c=e/(o-1),a=r(c,n),h=(1-a)*s[0]+a*t[0],u=(1-a)*s[1]+a*t[1],d=(1-a)*s[2]+a*t[2];i.push([h,u,d])}return i},M=s=>s,V=(s,t=!1)=>t?1-(1-s)**2:s**2,C=(s,t=!1)=>t?1-(1-s)**3:s**3,p=(s,t=!1)=>t?1-Math.sin((1-s)*Math.PI/2):Math.sin(s*Math.PI/2),w=(s,t=!1)=>t?1-Math.sqrt(1-(1-s)**2):1-Math.sqrt(1-s**2),y=(s,t=!1)=>t?Math.sqrt(1-(1-s)**2):1-Math.sqrt(1-s),z={linearPosition:M,exponentialPosition:V,quadraticPosition:C,sinusoidalPosition:p,circularPosition:w,arcPosition:y},g=(s,t)=>{let o=t[0]-s[0],r=t[1]-s[1],n=t[2]-s[2];return Math.sqrt(o*o+r*r+n*n)},l=class{constructor({x:t,y:o,z:r,color:n}={}){this.x=0;this.y=0;this.z=0;this.color=[0,0,0];this.positionAndColor={x:t,y:o,z:r,color:n}}set positionAndColor({x:t,y:o,z:r,color:n}){if(t&&o&&o&&n)throw new Error("Point must be initialized with either x,y,z or hsl");t&&o&&r?(this.x=t,this.y=o,this.z=r,this.color=m([this.x,this.y,this.z])):n&&(this.color=n,[this.x,this.y,this.z]=b(n))}get position(){return[this.x,this.y,this.z]}get hslCSS(){return`hsl(${this.color[0]}, ${this.color[1]*100}%, ${this.color[2]*100}%)`}},P=class{constructor(t=f(),o=4,r=p){this.positionFunction=p;if(!t||t.length<2)throw new Error("Must have at least two anchor colors");if(o<1)throw new Error("Must have at least one point");this.anchorPoints=t.map(n=>new l({color:n})),this.numPoints=o+2,this.positionFunction=r,this.updatePointPairs()}updatePointPairs(){let t=[];for(let o=0;o<this.anchorPoints.length-1;o++){let r=[this.anchorPoints[o],this.anchorPoints[o+1]];t.push(r)}this.points=t.map((o,r)=>{let n=o[0]?o[0].position:[0,0,0],i=o[1]?o[1].position:[0,0,0];return x(n,i,this.numPoints,this.positionFunction,!!(r%2)).map(e=>new l({x:e[0],y:e[1],z:e[2]}))})}addAnchorPoint({x:t,y:o,z:r,color:n}){let i=new l({x:t,y:o,z:r,color:n});return this.anchorPoints.push(i),this.updatePointPairs(),i}getClosestAnchorPoint(t,o){let r=this.anchorPoints.map(e=>g(e.position,t)),n=Math.min(...r);if(n>o)return null;let i=r.indexOf(n);return this.anchorPoints[i]}set anchorPoint({pointReference:t,pointIndex:o,x:r,y:n,z:i,color:e}){let c=o;if(t&&(c=this.anchorPoints.indexOf(t)),c==-1)throw new Error("Anchor point not found");(c==0||c==this.anchorPoints.length-1)&&(this.anchorPoints[c]=new l({x:r,y:n,z:i,color:e}),this.updatePointPairs())}get flattenedPoints(){return this.points.flat().filter((t,o)=>o!=0?o%this.numPoints:!0)}get colors(){return this.flattenedPoints.map(t=>t.color)}get colorsCSS(){return this.flattenedPoints.map(t=>t.hslCSS)}};export{P as Poline,b as hslToPoint,m as pointToHSL,z as positionFunctions,f as randomHSLPair,x as vectorsOnLine};
