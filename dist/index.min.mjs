var m=(n,t,o)=>{let i=Math.atan2(t-.5,n-.5)*(180/Math.PI);i=(i+90)%360;let c=o,h=Math.sqrt(Math.pow(t-.5,2)+Math.pow(n-.5,2))/.5;return[i,c,h]},b=n=>{let[t,o,r]=n,s=.5,e=.5,i=t/(180/Math.PI)-90,c=r*s,a=s+c*Math.cos(i),h=e+c*Math.sin(i);return[a,h,o]},M=(n=90,t=0,o=.25,r=null)=>{let s,e,i;r?[s,e,i]=r:(s=Math.random()*360,e=Math.random(),i=Math.random());let c=(360+(s+n+Math.random()*(360-n*2)))%360,a=t+Math.random()*(1-t),h=t+Math.random()*(1-o);return[[s,e,i],[c,a,h]]},x=(n,t,o=4,r=(e,i)=>e,s=!1)=>{let e=[];for(let i=0;i<o;i++){let c=i/(o-1),a=r(c,s),h=(1-a)*n[0]+a*t[0],p=(1-a)*n[1]+a*t[1],d=(1-a)*n[2]+a*t[2];e.push([h,p,d])}return e},f=n=>n,V=(n,t=!1)=>t?1-(1-n)**2:n**2,w=(n,t=!1)=>t?1-(1-n)**3:n**3,l=(n,t=!1)=>t?1-Math.sin((1-n)*Math.PI/2):Math.sin(n*Math.PI/2),y=(n,t=!1)=>t?1-Math.sqrt(1-(1-n)**2):1-Math.sqrt(1-n**2),C=(n,t=!1)=>t?Math.sqrt(1-(1-n)**2):1-Math.sqrt(1-n),z={linearPosition:f,exponentialPosition:V,quadraticPosition:w,sinusoidalPosition:l,circularPosition:y,arcPosition:C},g=(n,t)=>{let o=t[0]-n[0],r=t[1]-n[1],s=t[2]-n[2];return Math.sqrt(o*o+r*r+s*s)},u=class{constructor({x:t,y:o,z:r,color:s}={}){this.x=0;this.y=0;this.z=0;this.color=[0,0,0];this.positionAndColor={x:t,y:o,z:r,color:s}}set positionAndColor({x:t,y:o,z:r,color:s}){if(t&&o&&o&&s)throw new Error("Point must be initialized with either x,y,z or hsl");t&&o&&r?(this.x=t,this.y=o,this.z=r,this.color=m(this.x,this.y,this.z)):s&&(this.color=s,[this.x,this.y,this.z]=b(s))}get position(){return[this.x,this.y,this.z]}get hslCSS(){return`hsl(${this.color[0]}, ${this.color[1]*100}%, ${this.color[2]*100}%)`}},P=class{constructor(t=M(),o=4,r=l){this.positionFunction=l;if(!t||t.length<2)throw new Error("Must have at least two anchor colors");if(o<1)throw new Error("Must have at least one point");this.anchorPoints=t.map(s=>new u({color:s})),this.numPoints=o+2,this.positionFunction=r,this.updatePointPairs()}updatePointPairs(){let t=[];for(let o=0;o<this.anchorPoints.length-1;o++){let r=[this.anchorPoints[o],this.anchorPoints[o+1]];t.push(r)}this.points=t.map((o,r)=>{let s=o[0]?o[0].position:[0,0,0],e=o[1]?o[1].position:[0,0,0];return x(s,e,this.numPoints,this.positionFunction,!!(r%2)).map(i=>new u({x:i[0],y:i[1],z:i[2]}))})}addAnchorPoint({x:t,y:o,z:r,color:s}){let e=new u({x:t,y:o,z:r,color:s});this.anchorPoints.push(e),this.updatePointPairs()}getClosestAnchorPoint(t,o){let r=this.anchorPoints.map(i=>g(i.position,t)),s=Math.min(...r);if(s>o)return null;let e=r.indexOf(s);return this.anchorPoints[e]}set anchorPoint({pointReference:t,pointIndex:o,x:r,y:s,z:e,color:i}){let c=o;t&&(c=this.anchorPoints.indexOf(t)),this.anchorPoints[c]=new u({x:r,y:s,z:e,color:i}),this.updatePointPairs()}get flattenedPoints(){return this.points.flat().filter((t,o)=>o!=0?o%this.numPoints:!0)}get colors(){return this.flattenedPoints.map(t=>t.color)}get colorsCSS(){return this.flattenedPoints.map(t=>t.hslCSS)}};export{P as Poline,b as hslToPoint,m as pointToHSL,z as positionFunctions,M as randomHSLPair,x as vectorsOnLine};
